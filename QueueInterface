public interface QueueInterface<T>
{
 void enqueue(T element) throws QueueOverflowException
;
 // Throws QueueOverflowException if this queue is full;
 // otherwise, adds element to the rear of this queue.
 T dequeue() throws QueueUnderflowException;
 // Throws QueueUnderflowException if this queue is empty;
 // otherwise, removes front element from this queue and returns it.
 boolean isFull();
// Returns true if this queue is full;
 // otherwise, returns false.
 boolean isEmpty();
 // Returns true if this queue is empty;
 // otherwise, returns false.
 int size();
// Returns the number of elements in this queue.
 String toString();
 // Creates and returns a string that correctly represents the current queue
 int space();
 // returns an integer indicating how many empty spaces remain in the queue.
 void remove(int count);
 /* removes the front count elements from the queue, and throws QueueUnderflowException if there
    are less than count elements in the queue.*/
 boolean swapStart();
 /* returns false if there are less than two elements in the queue;
    otherwise it reverses the order of the front two elements in the queue and returns
    true.*/
 boolean swapEnds();
 /* returns false if there are less than two elements in the queue;
    otherwise it swaps the first and last elements of the queue and returns true.*/
}
