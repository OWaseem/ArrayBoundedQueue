
public class ArrayBoundedQueue<T> implements QueueInterface<T>{
	
	 protected final int DEFCAP = 100; // default capacity
	 protected T[] elements; // array that holds queue elements
	 protected int numElements = 0; // number of elements in the queue
	 protected int front = 0; // index of front of queue
	 protected int rear; // index of rear of queue
	 
	 public ArrayBoundedQueue()
	 {
	 elements = (T[]) new Object[DEFCAP];
	;
	 rear = DEFCAP - 1;
	 }
	 public ArrayBoundedQueue(int maxSize)
	 {
	  elements = (T[]) new Object[maxSize];
	  rear = maxSize - 1;
	 }
	 public void enqueue(T element)
	// Throws QueueOverflowException if this queue is full;
	// otherwise, adds element to the rear of this queue.
	{
	 if (isFull())
	 throw new QueueOverflowException("Enqueue attempted on a full queue.");
	 else
	 {
	 rear = (rear + 1) % elements.length;
	 elements[rear] = element;
	 numElements = numElements + 1;
	 }
	}
	 public T dequeue()
	// Throws QueueUnderflowException if this queue is empty;
	// otherwise, removes front element from this queue and returns it.
	{
	 if (isEmpty())
	 throw new QueueUnderflowException("Dequeue attempted on empty queue.");
	 else
	 {
	 T toReturn = elements[front];
	 elements[front] = null;
	 front = (front + 1) % elements.length;
	 numElements = numElements - 1;
	 return toReturn;
	 }
	}
	 
	 public boolean isEmpty()
	// Returns true if this queue is empty; otherwise, returns false
	{
	 return (numElements == 0);
	}
	public boolean isFull()
	// Returns true if this queue is full; otherwise, returns false.
	{
	 return (numElements == elements.length);
	}
	public int size()
	// Returns the number of elements in this queue.
	{
	 return numElements;
	}
	
	public String toString()
	{
		String queue="";
		for(int i=0;i<numElements;i++)
		{
			queue= queue + elements[i].toString() + " ";
		}
		return queue;
	}
	@Override
	public int space() {
		
		return elements.length - numElements;
	}
	@Override
	public void remove(int count) throws QueueUnderflowException {
		// TODO Auto-generated method stub
		if (count > numElements) {
            throw new QueueUnderflowException("Not enough elements in the queue.");
        }

        for (int i = 0; i < count; i++) {
            front = (front + 1) % elements.length;
            numElements--;
        }
	}
	@Override
	public boolean swapStart() {
		// TODO Auto-generated method stub
		T topElement;
		T secondElement;
		if(numElements < 2)
		return false;
		else {
		topElement = elements[front];
		secondElement=elements[front -1];
		elements[front]=secondElement;
		elements[front-1]=topElement;
		}
		return true;
	}
	@Override
	public boolean swapEnds() {
		// TODO Auto-generated method stub
		T topElement;
		T lastElement;
		if(numElements < 2)
		return false;
		else {
		topElement = elements[front];
		lastElement=elements[rear];
		elements[front]=lastElement;
		elements[rear]=topElement;
		}
		return true;
	}

}
